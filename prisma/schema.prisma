generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    calls         Call[]      
    participants  Participant[] 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Call {
  id              String       @id @default(cuid())
  name            String
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String?
  status          String?
  startTime       DateTime
  endTime         DateTime?
  duration        Int?
  maxParticipants Int?
  inviteLink      String?
  participants    Participant[]
  createdAt       DateTime     @default(now())
}

model Participant {
  id       String  @id @default(cuid())
  callId   String
  callName  String
  call     Call    @relation(fields: [callId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name     String
  email    String
  role     String
  status   String
  startTime   DateTime?
  endTime  DateTime? 
}